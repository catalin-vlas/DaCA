/*
 * DaCASparqlProcessor
 * This is DaCA's Sparql Processor service.  You can find out more about     us at [https://github.com/catalin-vlas/DaCA](DaCA).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: aurelian.hreapca@info.uaic.ro
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wade.daca.sparql.client.api;

import com.wade.daca.sparql.client.ApiCallback;
import com.wade.daca.sparql.client.ProgressRequestBody;
import com.wade.daca.sparql.client.model.RdfTriple;
import com.wade.daca.sparql.client.ApiClient;
import com.wade.daca.sparql.client.ApiException;
import com.wade.daca.sparql.client.ApiResponse;
import com.wade.daca.sparql.client.Configuration;
import com.wade.daca.sparql.client.Pair;
import com.wade.daca.sparql.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TriplesApi {
    private ApiClient apiClient;

    public TriplesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TriplesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addTriples
     * @param namespaceId The namespace in which triples are added (required)
     * @param triples The array of triples (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTriplesCall(String namespaceId, List<RdfTriple> triples, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = triples;
        
        // create path and map variables
        String localVarPath = "/triples/{namespaceId}"
            .replaceAll("\\{" + "namespaceId" + "\\}", apiClient.escapeString(namespaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTriplesValidateBeforeCall(String namespaceId, List<RdfTriple> triples, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespaceId' is set
        if (namespaceId == null) {
            throw new ApiException("Missing the required parameter 'namespaceId' when calling addTriples(Async)");
        }
        
        // verify the required parameter 'triples' is set
        if (triples == null) {
            throw new ApiException("Missing the required parameter 'triples' when calling addTriples(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addTriplesCall(namespaceId, triples, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add triples in given namespace
     * 
     * @param namespaceId The namespace in which triples are added (required)
     * @param triples The array of triples (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addTriples(String namespaceId, List<RdfTriple> triples) throws ApiException {
        addTriplesWithHttpInfo(namespaceId, triples);
    }

    /**
     * Add triples in given namespace
     * 
     * @param namespaceId The namespace in which triples are added (required)
     * @param triples The array of triples (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addTriplesWithHttpInfo(String namespaceId, List<RdfTriple> triples) throws ApiException {
        com.squareup.okhttp.Call call = addTriplesValidateBeforeCall(namespaceId, triples, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add triples in given namespace (asynchronously)
     * 
     * @param namespaceId The namespace in which triples are added (required)
     * @param triples The array of triples (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTriplesAsync(String namespaceId, List<RdfTriple> triples, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTriplesValidateBeforeCall(namespaceId, triples, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addTriplesFromFile
     * @param namespaceId The namespace in which triples are added (required)
     * @param format The format of the data inside the file (required)
     * @param file File containing triples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTriplesFromFileCall(String namespaceId, String format, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/triples/{namespaceId}"
            .replaceAll("\\{" + "namespaceId" + "\\}", apiClient.escapeString(namespaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);
        if (format != null)
        localVarFormParams.put("format", format);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTriplesFromFileValidateBeforeCall(String namespaceId, String format, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespaceId' is set
        if (namespaceId == null) {
            throw new ApiException("Missing the required parameter 'namespaceId' when calling addTriplesFromFile(Async)");
        }
        
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling addTriplesFromFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addTriplesFromFileCall(namespaceId, format, file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add triples from file in given namespace
     * 
     * @param namespaceId The namespace in which triples are added (required)
     * @param format The format of the data inside the file (required)
     * @param file File containing triples (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addTriplesFromFile(String namespaceId, String format, File file) throws ApiException {
        addTriplesFromFileWithHttpInfo(namespaceId, format, file);
    }

    /**
     * Add triples from file in given namespace
     * 
     * @param namespaceId The namespace in which triples are added (required)
     * @param format The format of the data inside the file (required)
     * @param file File containing triples (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addTriplesFromFileWithHttpInfo(String namespaceId, String format, File file) throws ApiException {
        com.squareup.okhttp.Call call = addTriplesFromFileValidateBeforeCall(namespaceId, format, file, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add triples from file in given namespace (asynchronously)
     * 
     * @param namespaceId The namespace in which triples are added (required)
     * @param format The format of the data inside the file (required)
     * @param file File containing triples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTriplesFromFileAsync(String namespaceId, String format, File file, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTriplesFromFileValidateBeforeCall(namespaceId, format, file, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getTriples
     * @param namespaceId The namespace to be created (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTriplesCall(String namespaceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/triples/{namespaceId}"
            .replaceAll("\\{" + "namespaceId" + "\\}", apiClient.escapeString(namespaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTriplesValidateBeforeCall(String namespaceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespaceId' is set
        if (namespaceId == null) {
            throw new ApiException("Missing the required parameter 'namespaceId' when calling getTriples(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTriplesCall(namespaceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get triples of given namespace
     * 
     * @param namespaceId The namespace to be created (required)
     * @return List&lt;RdfTriple&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RdfTriple> getTriples(String namespaceId) throws ApiException {
        ApiResponse<List<RdfTriple>> resp = getTriplesWithHttpInfo(namespaceId);
        return resp.getData();
    }

    /**
     * Get triples of given namespace
     * 
     * @param namespaceId The namespace to be created (required)
     * @return ApiResponse&lt;List&lt;RdfTriple&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RdfTriple>> getTriplesWithHttpInfo(String namespaceId) throws ApiException {
        com.squareup.okhttp.Call call = getTriplesValidateBeforeCall(namespaceId, null, null);
        Type localVarReturnType = new TypeToken<List<RdfTriple>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get triples of given namespace (asynchronously)
     * 
     * @param namespaceId The namespace to be created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTriplesAsync(String namespaceId, final ApiCallback<List<RdfTriple>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTriplesValidateBeforeCall(namespaceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RdfTriple>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

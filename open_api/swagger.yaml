swagger: '2.0'
info:
  description: >-
    DaCA is a  tool able to perform various processing tasks regarding the
    meta-data available in RDFa and HTML5 microdata formats provided by the Web
    Data Commons. A minimal set of operations are implemented: visualize,
    clasify, compare, and match/align.
  version: 1.0.0
  title: DaCA
host: daca.wade.com
basePath: /
tags:
  - name: dataset
    description: Calls related to manipulation of datasets
  - name: user
    description: Calls related to user management
schemes:
  - http
paths:
  /datasets:
    put:
      tags:
        - dataset
      summary: Add a new dataset
      description: ''
      operationId: addDataset
      consumes:
        - multipart/form-data
      parameters:
        - in: body
          name: body
          description: Dataset that will be added.
          required: true
          schema:
            $ref: '#/definitions/DatasetFormData'
      responses:
        '405':
          description: Invalid input
      security:
        - api_key: []
    get:
      tags:
        - dataset
      summary: Retrieve Datasets that are completely loaded
      description: ''
      operationId: getDatasets
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Dataset'
      security:
        - api_key: []
  /datasets/progress:
    get:
      tags:
        - dataset
      summary: Retrieve Datasets that are currently loading into RDF Store
      description: ''
      operationId: getDatasetsInProgress
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/DatasetInProgress'
      security:
        - api_key: []
  '/datasets/{datasetId}':
    get:
      tags:
        - dataset
      summary: Describe dataset given by ID
      description: Returns a single dataset if it exists.
      operationId: getDatasetById
      produces:
        - application/json
      parameters:
        - name: datasetId
          in: path
          description: ID of dataset to be returned
          required: true
          type: integer
          format: int64
        - name: sparqlQuery
          in: query
          description: A SparQL Query to be ran on Dataset.
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/DatasetDetails'
        '400':
          description: Invalid ID supplied
        '404':
          description: Dataset not found
      security:
        - api_key: []
    delete:
      tags:
        - dataset
      summary: Remove Dataset with given ID
      description: ''
      operationId: deleteDataset
      produces:
        - application/json
      parameters:
        - name: datasetId
          in: path
          description: ID of Dataset to be deleted
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Dataset not found
      security:
        - api_key: []
  '/datasets/{datasetId}/stats':
    get:
      tags:
        - dataset
      summary: Get statistics for a given dataset by ID
      description: ''
      operationId: getStatsForDataset
      produces:
        - application/json
      parameters:
        - name: datasetId
          in: path
          description: ID of dataset to be returned
          required: true
          type: integer
          format: int64
        - name: sparqlQuery
          in: query
          description: A SparQL Query to be ran on RDF Data Cube.
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/GraphDetails'
        '400':
          description: Invalid ID supplied
        '404':
          description: Dataset not found
      security:
        - api_key: []
  '/datasets/{datasetId}/graphs':
    get:
      tags:
        - dataset
      summary: Retrieve graph IDs for a given dataset
      description: ''
      operationId: getGraphsForDataset
      produces:
        - application/json
      parameters:
        - name: datasetId
          in: path
          description: ID of dataset for which are retrieved the graphs
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Graph'
      security:
        - api_key: []
  '/datasets/{datasetId}/graphs/{graphId}':
    get:
      tags:
        - dataset
      summary: Describe a graph given by ID.
      description: ''
      operationId: getGraph
      produces:
        - application/json
      parameters:
        - name: datasetId
          in: path
          description: ID of dataset for which is retrieved the graph
          required: true
          type: integer
          format: int64
        - name: graphId
          in: path
          description: ID of the graph that is retrieved
          required: true
          type: integer
          format: int64
        - name: sparqlQuery
          in: query
          description: A SparQL Query to be ran on Dataset.
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/GraphDetails'
        '400':
          description: Invalid ID supplied
        '404':
          description: Graph not found
      security:
        - api_key: []
  '/datasets/compare/{operationType}':
    get:
      tags:
        - dataset
      summary: Apply an operation on two graphs.
      description: ''
      operationId: applyCompare
      produces:
        - application/json
      parameters:
        - name: operationType
          in: path
          description: Operation to be applied
          required: true
          type: string
        - name: firstGraph
          in: query
          description: Operation to be applied
          required: true
          type: integer
        - name: secondGraph
          in: query
          description: Operation to be applied
          required: true
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/GraphDetails'
        '400':
          description: Invalid operation
  /datasets/matchalign:
    get:
      tags:
        - dataset
      summary: Match/Align two graphs.
      description: ''
      operationId: matchAlign
      produces:
        - application/json
      parameters:
        - name: firstGraph
          in: query
          description: Operation to be applied
          required: true
          type: integer
        - name: secondGraph
          in: query
          description: Operation to be applied
          required: true
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/GraphDetails'
        '400':
          description: Invalid operation
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
securityDefinitions:
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  DatasetFormData:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: Species Dataset
      url:
        type: string
        example: 'https://example.com/file.nq'
      fileContent:
        type: string
  Dataset:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: Species Dataset
  DatasetInProgress:
    type: object
    properties:
      dataset:
        $ref: '#/definitions/Dataset'
      progress:
        type: number
        example: '0.7'
  DatasetDetails:
    type: object
    properties:
      dataset:
        $ref: '#/definitions/Dataset'
      graphs:
        type: array
        items:
          $ref: '#/definitions/Graph'
  Graph:
    type: object
    properties:
      id:
        type: integer
        format: int64
  GraphDetails:
    type: object
    properties:
      graph:
        $ref: '#/definitions/Graph'
      triples:
        type: array
        items:
          $ref: '#/definitions/Triple'
  Triple:
    type: object
    properties:
      subject:
        type: object
      predicate:
        type: object
      object:
        type: object
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
